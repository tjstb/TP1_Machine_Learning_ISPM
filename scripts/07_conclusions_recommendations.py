import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def generate_conclusions_and_recommendations():
    """
    G√©n√®re les conclusions et recommandations de l'analyse de clustering
    """
    # Chargement des donn√©es
    df = pd.read_csv('data/clustered_data.csv')
    interpretations = pd.read_csv('data/cluster_interpretations.csv', index_col=0)
    
    print("=== CONCLUSIONS ET RECOMMANDATIONS ===")
    
    # 1. R√âSUM√â DE L'ANALYSE
    print("1. R√âSUM√â DE L'ANALYSE")
    print("=" * 50)
    
    n_clusters = df['Cluster'].nunique()
    total_customers = len(df)
    
    print(f"‚Ä¢ Dataset analys√©: {total_customers} clients")
    print(f"‚Ä¢ Nombre de clusters identifi√©s: {n_clusters}")
    print(f"‚Ä¢ Variables utilis√©es: √Çge, Revenu Annuel, Score de D√©pense")
    
    # Qualit√© du clustering
    from sklearn.metrics import silhouette_score
    from sklearn.preprocessing import StandardScaler
    
    features = ['Age', 'Annual Income (k$)', 'Spending Score (1-100)']
    X = df[features]
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    silhouette_avg = silhouette_score(X_scaled, df['Cluster'])
    
    print(f"‚Ä¢ Score de silhouette: {silhouette_avg:.3f}")
    
    if silhouette_avg > 0.5:
        quality = "Excellente"
    elif silhouette_avg > 0.3:
        quality = "Bonne"
    else:
        quality = "Mod√©r√©e"
    
    print(f"‚Ä¢ Qualit√© du clustering: {quality}")
    
    # 2. PROFILS DES SEGMENTS IDENTIFI√âS
    print(f"\n2. PROFILS DES SEGMENTS IDENTIFI√âS")
    print("=" * 50)
    
    cluster_summary = df.groupby('Cluster')[features].agg(['mean', 'count'])
    
    for cluster in sorted(df['Cluster'].unique()):
        cluster_data = df[df['Cluster'] == cluster]
        size = len(cluster_data)
        percentage = (size / total_customers) * 100
        
        print(f"\nüìä CLUSTER {cluster} ({size} clients - {percentage:.1f}%)")
        print(f"   √Çge moyen: {cluster_data['Age'].mean():.1f} ans")
        print(f"   Revenu moyen: {cluster_data['Annual Income (k$)'].mean():.1f}k$")
        print(f"   Score d√©pense moyen: {cluster_data['Spending Score (1-100)'].mean():.1f}/100")
        
        # R√©partition par genre
        gender_dist = cluster_data['Gender'].value_counts(normalize=True)
        print(f"   R√©partition genre: {gender_dist.to_dict()}")
        
        # Caract√©risation
        avg_income = cluster_data['Annual Income (k$)'].mean()
        avg_spending = cluster_data['Spending Score (1-100)'].mean()
        avg_age = cluster_data['Age'].mean()
        
        characteristics = []
        if avg_age < 30:
            characteristics.append("Population jeune")
        elif avg_age > 50:
            characteristics.append("Population mature")
        
        if avg_income < 40:
            characteristics.append("Revenus modestes")
        elif avg_income > 70:
            characteristics.append("Revenus √©lev√©s")
        
        if avg_spending < 40:
            characteristics.append("D√©penses faibles")
        elif avg_spending > 60:
            characteristics.append("D√©penses √©lev√©es")
        
        if characteristics:
            print(f"   Caract√©ristiques: {', '.join(characteristics)}")
    
    # 3. INSIGHTS BUSINESS
    print(f"\n3. INSIGHTS BUSINESS")
    print("=" * 50)
    
    # Analyse de la relation revenu-d√©pense
    correlation_income_spending = df['Annual Income (k$)'].corr(df['Spending Score (1-100)'])
    print(f"‚Ä¢ Corr√©lation Revenu-D√©pense: {correlation_income_spending:.3f}")
    
    if abs(correlation_income_spending) < 0.3:
        print("  ‚Üí Faible corr√©lation: le revenu ne pr√©dit pas directement les d√©penses")
    
    # Segments √† fort potentiel
    high_value_segments = []
    for cluster in sorted(df['Cluster'].unique()):
        cluster_data = df[df['Cluster'] == cluster]
        avg_income = cluster_data['Annual Income (k$)'].mean()
        avg_spending = cluster_data['Spending Score (1-100)'].mean()
        
        if avg_income > 60 or avg_spending > 60:
            high_value_segments.append(cluster)
    
    print(f"‚Ä¢ Segments √† fort potentiel: {high_value_segments}")
    
    # 4. RECOMMANDATIONS STRAT√âGIQUES
    print(f"\n4. RECOMMANDATIONS STRAT√âGIQUES")
    print("=" * 50)
    
    recommendations = []
    
    for cluster in sorted(df['Cluster'].unique()):
        cluster_data = df[df['Cluster'] == cluster]
        avg_income = cluster_data['Annual Income (k$)'].mean()
        avg_spending = cluster_data['Spending Score (1-100)'].mean()
        avg_age = cluster_data['Age'].mean()
        size = len(cluster_data)
        
        print(f"\nüéØ CLUSTER {cluster} - Strat√©gies recommand√©es:")
        
        if avg_income > 70 and avg_spending > 60:
            print("   ‚Ä¢ Segment PREMIUM - Clients VIP")
            print("     - Produits haut de gamme et services exclusifs")
            print("     - Programme de fid√©lit√© premium")
            print("     - Marketing personnalis√© et exp√©riences sur-mesure")
            recommendations.append(f"Cluster {cluster}: Strat√©gie Premium")
            
        elif avg_income > 70 and avg_spending < 40:
            print("   ‚Ä¢ Segment POTENTIEL √âLEV√â - Riches √©conomes")
            print("     - Campagnes de stimulation des achats")
            print("     - Offres de valeur et promotions cibl√©es")
            print("     - √âducation sur les b√©n√©fices produits")
            recommendations.append(f"Cluster {cluster}: Activation du potentiel")
            
        elif avg_income < 40 and avg_spending > 60:
            print("   ‚Ä¢ Segment IMPULSIF - D√©pensiers √† faible revenu")
            print("     - Produits abordables et accessibles")
            print("     - Facilit√©s de paiement")
            print("     - Marketing √©motionnel")
            recommendations.append(f"Cluster {cluster}: Accessibilit√©")
            
        elif avg_income < 40 and avg_spending < 40:
            print("   ‚Ä¢ Segment √âCONOME - Clients sensibles au prix")
            print("     - Strat√©gie prix bas et promotions")
            print("     - Produits de base et essentiels")
            print("     - Communication sur le rapport qualit√©-prix")
            recommendations.append(f"Cluster {cluster}: Prix comp√©titifs")
            
        else:
            print("   ‚Ä¢ Segment √âQUILIBR√â - Classe moyenne")
            print("     - Offre diversifi√©e et √©quilibr√©e")
            print("     - Promotions saisonni√®res")
            print("     - Communication sur la qualit√©")
            recommendations.append(f"Cluster {cluster}: Approche √©quilibr√©e")
    
    # 5. M√âTRIQUES DE PERFORMANCE SUGG√âR√âES
    print(f"\n5. M√âTRIQUES DE PERFORMANCE SUGG√âR√âES")
    print("=" * 50)
    
    print("‚Ä¢ M√©triques par segment:")
    print("  - Taux de conversion par cluster")
    print("  - Panier moyen par cluster")
    print("  - Fr√©quence d'achat par cluster")
    print("  - Taux de r√©tention par cluster")
    print("  - Customer Lifetime Value (CLV) par cluster")
    
    print("\n‚Ä¢ M√©triques globales:")
    print("  - √âvolution de la taille des segments")
    print("  - Migration entre segments")
    print("  - ROI des campagnes par segment")
    
    # 6. LIMITES ET AM√âLIORATIONS
    print(f"\n6. LIMITES ET AM√âLIORATIONS POSSIBLES")
    print("=" * 50)
    
    print("‚Ä¢ Limites actuelles:")
    print("  - Analyse bas√©e uniquement sur 3 variables")
    print("  - Pas de donn√©es comportementales d√©taill√©es")
    print("  - Pas de dimension temporelle")
    print("  - Taille d'√©chantillon relativement petite")
    
    print("\n‚Ä¢ Am√©liorations sugg√©r√©es:")
    print("  - Int√©grer des donn√©es transactionnelles")
    print("  - Ajouter des variables comportementales (fr√©quence, r√©cence)")
    print("  - Inclure des donn√©es d√©mographiques suppl√©mentaires")
    print("  - Analyser l'√©volution temporelle des segments")
    print("  - Tester d'autres algorithmes de clustering")
    print("  - Validation avec des donn√©es externes")
    
    # Visualisation finale - Dashboard de synth√®se
    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('Dashboard de Synth√®se - Segmentation Clients', fontsize=16)
    
    # Taille des segments
    cluster_sizes = df['Cluster'].value_counts().sort_index()
    axes[0,0].pie(cluster_sizes.values, labels=[f'Cluster {i}' for i in cluster_sizes.index], 
                  autopct='%1.1f%%')
    axes[0,0].set_title('R√©partition des Segments')
    
    # Profil revenu-d√©pense par cluster
    for cluster in sorted(df['Cluster'].unique()):
        cluster_data = df[df['Cluster'] == cluster]
        axes[0,1].scatter(cluster_data['Annual Income (k$)'], 
                         cluster_data['Spending Score (1-100)'],
                         label=f'Cluster {cluster}', alpha=0.7, s=50)
    axes[0,1].set_xlabel('Revenu Annuel (k$)')
    axes[0,1].set_ylabel('Score de D√©pense')
    axes[0,1].set_title('Profil Revenu-D√©pense par Segment')
    axes[0,1].legend()
    axes[0,1].grid(True, alpha=0.3)
    
    # √Çge moyen par cluster
    age_by_cluster = df.groupby('Cluster')['Age'].mean()
    axes[1,0].bar(age_by_cluster.index, age_by_cluster.values)
    axes[1,0].set_xlabel('Cluster')
    axes[1,0].set_ylabel('√Çge Moyen')
    axes[1,0].set_title('√Çge Moyen par Segment')
    
    # Heatmap des profils
    cluster_profiles = df.groupby('Cluster')[features].mean()
    sns.heatmap(cluster_profiles.T, annot=True, cmap='RdYlBu_r', ax=axes[1,1], fmt='.1f')
    axes[1,1].set_title('Profils Moyens par Segment')
    
    plt.tight_layout()
    plt.savefig('plots/final_dashboard.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    # Sauvegarde du rapport
    report = {
        'total_customers': total_customers,
        'n_clusters': n_clusters,
        'silhouette_score': silhouette_avg,
        'clustering_quality': quality,
        'recommendations': recommendations
    }
    
    # Sauvegarde en CSV pour r√©f√©rence
    pd.DataFrame([report]).to_csv('data/analysis_summary.csv', index=False)
    
    print(f"\n‚úÖ ANALYSE TERMIN√âE")
    print("=" * 50)
    print(f"Tous les r√©sultats ont √©t√© sauvegard√©s dans le dossier 'data/'")
    print(f"Toutes les visualisations ont √©t√© sauvegard√©es dans le dossier 'plots/'")
    
    return report

if __name__ == "__main__":
    final_report = generate_conclusions_and_recommendations()
    print("\nAnalyse compl√®te termin√©e avec succ√®s!")
